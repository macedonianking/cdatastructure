import("//build/config/android/config.gni")
import("//build/config/android/ijar.gni")

assert(is_android)

# generate *.build_config file.
template("write_build_config") {
  type = invoker.type

  action(target_name) {
    set_sources_assignment_filter([])
    build_config = invoker.build_config

    assert(type == "android_apk" 
           || type == "java_library" 
           || type == "android_resources" 
           || type == "deps_dex" 
           || type == "android_assets" 
           || type == "resource_rewriter" 
           || type == "java_binary" 
           || type == "group" 
           || type == "java_prebuilt")

    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
    if (!defined(deps)) {
      deps = []
    }

    script = "//build/android/gyp/write_build_config.py"
    depfile = "$target_gen_dir/$target_name.d"
    inputs = []

    _deps_configs = []
    if (defined(invoker.possible_config_deps)) {
      set_sources_assignment_filter([])
      foreach(_possible_dep, invoker.possible_config_deps) {
        _target_label = get_label_info(_possible_dep, "label_no_toolchain")
        deps += [ "${_target_label}__build_config" ]
        _dep_gen_dir = get_label_info(_possible_dep, "target_gen_dir")
        _dep_name = get_label_info(_possible_dep, "name")
        _deps_configs += [ "$_dep_gen_dir/$_dep_name.build_config" ]
      }
      set_sources_assignment_filter([])
    }
    _rebased_deps_configs = rebase_path(_deps_configs, root_build_dir)

    outputs = [
      build_config,
    ]

    args = [
      "--type",
      type,
      "--depfile",
      rebase_path(depfile, root_build_dir),
      "--deps-configs=$_rebased_deps_configs",
      "--build-config",
      rebase_path(build_config, root_build_dir),
    ]

    is_java = type == "java_library" || type == "java_binary" ||
              type == "java_prebuilt"
    is_apk = type == "android_apk"
    is_android_assets = type == "android_assets"
    is_android_resources = type == "android_resources"
    is_deps_dex = type == "deps_dex"
    is_group = type == "group"

    supports_android = is_apk || is_android_assets || is_android_resources ||
                       is_deps_dex || is_group ||
                       (is_java && defined(invoker.supports_android) &&
                        invoker.supports_android)
    requires_android =
        is_apk || is_android_assets || is_android_resources || is_deps_dex ||
        (is_java && defined(invoker.requires_android) &&
         invoker.requires_android)

    assert(!requires_android || supports_android,
           "requires_android requires" + " supports_android")

    # Mark these variables as used.
    assert(is_java || true)
    assert(is_apk || true)
    assert(is_android_resources || true)
    assert(is_deps_dex || true)
    assert(is_group || true)

    if (is_java || is_apk) {
      args += [
        "--jar-path",
        rebase_path(invoker.jar_path, root_build_dir),
      ]
    }

    if (is_apk || is_deps_dex || (is_java && supports_android)) {
      args += [
        "--dex-path",
        rebase_path(invoker.dex_path, root_build_dir),
      ]
    }
    if (supports_android) {
      args += [ "--supports-android" ]
    }
    if (requires_android) {
      args += [ "--requires-android" ]
    }
    if (defined(invoker.bypass_platform_checks) &&
        invoker.bypass_platform_checks) {
      args += [ "--bypass-platform-checks" ]
    }

    if (defined(invoker.apk_under_test)) {
      deps += [ "${invoker.apk_under_test}__build_config" ]
      apk_under_test_gen_dir =
          get_label_info(invoker.apk_under_test, "target_gen_dir")
      apk_under_test_name = get_label_info(invoker.apk_under_test, "name")
      apk_under_test_config =
          "$apk_under_test_gen_dir/$apk_under_test_name.build_config"
      args += [
        "--tested-apk-config",
        rebase_path(apk_under_test_config, root_build_dir),
      ]
    }

    if (is_android_assets) {
      if (defined(invoker.asset_sources)) {
        _rebased_asset_sources =
            rebase_path(invoker.asset_sources, root_build_dir)
        args += [ "--asset-sources=$_rebased_asset_sources" ]
      }
      if (defined(invoker.asset_renaming_sources)) {
        _rebased_asset_renaming_sources =
            rebase_path(invoker.asset_renaming_sources, root_build_dir)
        args += [ "--asset-renaming-sources=$_rebased_asset_renaming_sources" ]

        # These are zip paths, so no need to rebase.
        args += [ "--asset-renaming-destinations=${invoker.asset_renaming_destinations}" ]
      }
      if (defined(invoker.disable_compression) && invoker.disable_compression) {
        args += [ "--disable-asset-compression" ]
      }
    }

    if (is_android_resources || is_apk) {
      assert(defined(invoker.resources_zip))
      args += [
        "--resources-zip",
        rebase_path(invoker.resources_zip, root_build_dir),
      ]
      if (defined(invoker.android_manifest)) {
        inputs += [ invoker.android_manifest ]
        args += [
          "--android-manifest",
          rebase_path(invoker.android_manifest, root_build_dir),
        ]
      } else {
        assert(!is_apk, "apk build configs require an android_manifest")
      }
      if (defined(invoker.custom_package)) {
        args += [
          "--package-name",
          invoker.custom_package,
        ]
      }
      if (defined(invoker.r_text)) {
        args += [
          "--r-text",
          rebase_path(invoker.r_text, root_build_dir),
        ]
      }
    }

    if (is_android_resources && defined(invoker.resource_dirs)) {
      resource_dirs = rebase_path(invoker.resource_dirs, root_build_dir)
      args += [ "--resource-dirs=$resource_dirs" ]
    }

    if (is_apk) {
      if (defined(invoker.shared_libraries_runtime_deps_file)) {
        # Don't list shared_libraries_runtime_deps_file as an input in order to
        # avoid having to depend on the runtime_deps target. See comment in
        # rules.gni for why we do this.
        args += [
          "--shared-libraries-runtime-deps",
          rebase_path(invoker.shared_libraries_runtime_deps_file,
                      root_build_dir),
        ]
      }

      if (defined(invoker.secondary_abi_shared_libraries_runtime_deps_file)) {
        # Don't list secondary_abi_shared_libraries_runtime_deps_file as an
        # input in order to avoid having to depend on the runtime_deps target.
        # See comment in rules.gni for why we do this.
        args += [
          "--secondary-abi-shared-libraries-runtime-deps",
          rebase_path(invoker.secondary_abi_shared_libraries_runtime_deps_file,
                      root_build_dir),
        ]
      }

      if (defined(invoker.proguard_enabled) && invoker.proguard_enabled) {
        args += [
          "--proguard-enabled",
          "--proguard-info",
          rebase_path(invoker.proguard_info, root_build_dir),
        ]
      }

      if (defined(invoker.apk_path)) {
        _rebased_apk_path = rebase_path(invoker.apk_path, root_build_dir)
        _rebased_incremental_apk_path =
            rebase_path(invoker.incremental_apk_path, root_build_dir)
        _rebased_incremental_install_script_path =
            rebase_path(invoker.incremental_install_script_path, root_build_dir)
        args += [ "--apk-path=$_rebased_apk_path" ]
        args += [ "--incremental-apk-path=$_rebased_incremental_apk_path" ]
        args += [ "--incremental-install-script-path=$_rebased_incremental_install_script_path" ]
      }
    }

    if (defined(invoker.java_sources_file)) {
      args += [
        "--java-sources-file",
        rebase_path(invoker.java_sources_file, root_build_dir),
      ]
    }
    if (defined(invoker.srcjar)) {
      args += [
        "--srcjar",
        rebase_path(invoker.srcjar, root_build_dir),
      ]
    }
    if (defined(invoker.bundled_srcjars)) {
      _rebased_bundled_srcjars =
          rebase_path(invoker.bundled_srcjars, root_build_dir)
      args += [ "--bundled-srcjars=$_rebased_bundled_srcjars" ]
    }
    if (defined(invoker.input_jars_paths)) {
      _rebased_input_jars_paths =
          rebase_path(invoker.input_jars_paths, root_build_dir)
      args += [ "--extra-classpath-jars=$_rebased_input_jars_paths" ]
    }
    if (defined(invoker.proguard_configs)) {
      _rebased_proguard_configs =
          rebase_path(invoker.proguard_configs, root_build_dir)
      args += [ "--proguard-configs=$_rebased_proguard_configs" ]
    }
    if (current_toolchain != default_toolchain) {
      # This has to be a built-time error rather than a GN assert because many
      # packages have a mix of java and non-java targets. For example, the
      # following would fail even though nothing depends on :bar(//baz):
      #
      # shared_library("foo") {
      # }
      #
      # android_library("bar") {
      #   deps = [ ":foo(//baz)" ]
      #   assert(current_toolchain == default_toolchain)
      # }
      _msg = [
        "Tried to build an Android target in a non-default toolchain.",
        "target: " + get_label_info(":$target_name", "label_with_toolchain"),
        "default_toolchain: $default_toolchain",
      ]
      args += [ "--fail=$_msg" ]
    }
  }
}


  rebased_android_sdk = rebase_path(android_sdk, root_build_dir)
  rebased_android_sdk_build_tools =
      rebase_path(android_sdk_build_tools, root_build_dir)

  android_sdk_jar = "$android_sdk/android.jar"
  rebased_android_sdk_jar = rebase_path(android_sdk_jar, root_build_dir)
  android_default_aapt_path = "$rebased_android_sdk_build_tools/aapt"
  if (host_os == "win") {
    android_default_aapt_path += ".exe"
  }

  # process_java_prebuilt 

  # Generates a script in the output bin.java directory to run a java binary.
  #
  # Variables
  #   main_class: The class containing the progam entry point.
  #   jar_path: The path to the jar to run.
  #   script_name: Name of the script to generate.
  #   build_config: Path to .build_config for the jar (contains classpath).
  #   wrapper_script_args: List of extra arguments to pass to the executable.
  #
  template("java_binary_script") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])

    _main_class = invoker.main_class
    _build_config = invoker.build_config
    _jar_path = invoker.jar_path
    _script_name = invoker.script_name

    action(target_name) {
      script = "//build/android/gyp/create_java_binary_script.py"
      depfile = "$target_gen_dir/$_script_name.d"
      java_script = "$root_build_dir/bin/$_script_name"
      inputs = [
        _build_config,
      ]
      outputs = [
        java_script,
      ]
      forward_variables_from(invoker, [ "deps" ])
      _rebased_build_config = rebase_path(_build_config, root_build_dir)
      args = [
        "--depfile",
        rebase_path(depfile, root_build_dir),
        "--output",
        rebase_path(java_script, root_build_dir),
        "--classpath=@FileArg($_rebased_build_config:deps_info:java:full_classpath)",
        "--jar-path",
        rebase_path(_jar_path, root_build_dir),
        "--main-class",
        _main_class,
      ]
      if (emma_coverage) {
        args += [
          "--classpath",
          rebase_path("//third_party/android_tools/sdk/tools/lib/emma.jar",
                      root_build_dir),
        ]
        args += [ "--noverify" ]
      }
      if (defined(invoker.wrapper_script_args)) {
        args += [ "--" ] + invoker.wrapper_script_args
      }
      if (defined(invoker.bootclasspath)) {
        args += [
          "--bootclasspath",
          rebase_path(invoker.bootclasspath, root_build_dir),
        ]
      }
    }
  }

  template("process_java_prebuilt") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])

    assert(invoker.build_config != "")
    _build_config = invoker.build_config
    _rebased_build_config = rebase_path(_build_config, root_build_dir)
    assert(_rebased_build_config != "" || true)  # Mark used.

    _proguard_preprocess =
        defined(invoker.proguard_preprocess) && invoker.proguard_preprocess
    _input_jar_path = invoker.input_jar_path
    _output_jar_path = invoker.output_jar_path

    _jar_excluded_patterns = []
    if (defined(invoker.jar_excluded_patterns)) {
      _jar_excluded_patterns = invoker.jar_excluded_patterns
    }
    _strip_resource_classes = defined(invoker.strip_resource_classes) &&
                              invoker.strip_resource_classes
    _filter_jar = _jar_excluded_patterns != [] || _strip_resource_classes

    if (_filter_jar) {
      _filter_target = "${target_name}__filter"
      _output_jar_target = _filter_target
    }
    if (_proguard_preprocess) {
      _proguard_target = "${target_name}__proguard_process"
      _output_jar_target = _proguard_target
    }
    if (!_filter_jar && !_proguard_preprocess) {
      _copy_target = "${target_name}__copy"
      _output_jar_target = _copy_target
    }

    # the source jar needs filter classes.
    if (_filter_jar) {
      _filtered_jar_path = _output_jar_path
      if (_proguard_preprocess) {
        _filtered_jar_path = "$target_out_dir/$target_name-filtered.jar"
      }
      action(_filter_target) {
        script = "//build/android/gyp/jar.py"
        forward_variables_from(invoker,
                               [
                                 "deps",
                                 "public_deps",
                               ])
        inputs = [
          _build_config,
          _input_jar_path,
        ]
        outputs = [
          _filtered_jar_path,
        ]
        args = [
          "--input-jar",
          rebase_path(_input_jar_path, root_build_dir),
          "--jar-path",
          rebase_path(_filtered_jar_path, root_build_dir),
          "--excluded-classes=$_jar_excluded_patterns",
        ]
        if (_strip_resource_classes) {
          args += [ "--strip-resource-classes-for=@FileArg($_rebased_build_config:javac:resource_packages)" ]
        }
      }
    }

    # proguard preprocess the input jar.
    if (_proguard_preprocess) {
      _proguard_config_path = invoker.proguard_preprocess_config
      proguard(_proguard_target) {
        if (_filter_jar) {
          _proguard_input_jar = _filtered_jar_path
          public_deps = [
            ":$_filter_target",
          ]
        } else {
          _proguard_input_jar = _input_jar_path
          public_deps = []
        }
        if (defined(invoker.deps)) {
          deps = invoker.deps
        }
        if (defined(invoker.public_deps)) {
          public_deps += invoker.public_deps
        }
        inputs = [
          _build_config,
          _proguard_config_path,
          _proguard_input_jar,
        ]
        output_jar_path = _output_jar_path

        _rebased_input_paths = [ rebase_path(_input_jar_path, root_build_dir) ]
        _rebased_proguard_configs =
            [ rebase_path(_proguard_config_path, root_build_dir) ]
        args = [
          "--input-paths=$_rebased_input_paths",
          "--proguard-configs=$_rebased_proguard_configs",
          "--classpath=@FileArg($_rebased_build_config:javac:classpath)",
        ]
      }
    } else if (!_filter_jar) {
      copy(_copy_target) {
        forward_variables_from(invoker,
                               [
                                 "deps",
                                 "public_deps",
                               ])
        sources = [
          _input_jar_path,
        ]
        outputs = [
          _output_jar_path,
        ]
      }
    }

    group(target_name) {
      forward_variables_from(invoker,
                             [
                               "data_deps",
                               "visibility",
                             ])
      public_deps = [
        ":$_output_jar_target",
      ]
    }
  }

  template("java_prebuilt_impl") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])
    _supports_android =
        defined(invoker.supports_android) && invoker.supports_android

    assert(defined(invoker.jar_path))
    _base_path = "${target_gen_dir}/$target_name"

    # Jar files can be needed at runtime (by Robolectric tests or java binaries),
    # so do not put them under gen/.
    _target_dir_name = get_label_info(":$target_name", "dir")
    _jar_path = "$root_out_dir/lib.java$_target_dir_name/$target_name.jar"
    _ijar_path =
        "$root_out_dir/lib.java$_target_dir_name/$target_name.interface.jar"
    _build_config = _base_path + ".build_config"

    if (_supports_android) {
      _dex_path = _base_path + ".dex.jar"
    }
    _deps = []
    if (defined(invoker.deps)) {
      _deps = invoker.deps
    }
    _jar_deps = []
    if (defined(invoker.jar_dep)) {
      _jar_deps = [ invoker.jar_dep ]
    }

    _template_name = target_name

    _build_config_target_name = "${_template_name}__build_config"
    _process_jar_target_name = "${_template_name}__process_jar"
    _ijar_target_name = "${_template_name}__ijar"
    if (_supports_android) {
      _dex_target_name = "${_template_name}__dex"
    }

    # generate *.build_config target.
    write_build_config(_build_config_target_name) {
      type = "java_prebuilt"
      forward_variables_from(invoker,
                             [
                               "input_jars_paths",
                               "proguard_configs",
                             ])
      supports_android = _supports_android
      requires_android =
          defined(invoker.requires_android) && invoker.requires_android

      if (defined(invoker.deps)) {
        possible_config_deps = _deps
      }
      build_config = _build_config
      jar_path = _jar_path
      if (_supports_android) {
        dex_path = _dex_path
      }
    }

    # jar preprocess target.
    process_java_prebuilt(_process_jar_target_name) {
      forward_variables_from(invoker,
                             [
                               "jar_excluded_patterns",
                               "proguard_preprocess",
                               "proguard_preprocess_config",
                               "strip_resource_classes",
                             ])

      visibility = [
        ":$_ijar_target_name",
        ":$_template_name",
      ]
      if (_supports_android) {
        visibility += [ ":$_dex_target_name" ]
      }

      build_config = _build_config
      input_jar_path = invoker.jar_path
      output_jar_path = _jar_path

      # jar deps generate the current jar, but it was not depeneded by the
      # current final target directly.
      deps = [ ":$_build_config_target_name" ] + _deps + _jar_deps
    }

    # ijar target that generate *.interface.jar
    generate_interface_jar(_ijar_target_name) {
      if (!defined(invoker.proguard_preprocess) ||
          !invoker.proguard_preprocess) {
        # Always used the unfiltered .jar to create the interface jar so that
        # other targets will resolve filtered classes when depending on
        # BuildConfig, NativeLibraries, etc.
        input_jar = invoker.jar_path
        deps = _deps + _jar_deps
      } else {
        # However, still apply pre-proguarding, since ignoring that can break
        # compiles.
        input_jar = _jar_path
        deps = [
          ":$_process_jar_target_name",
        ]
      }

      output_jar = _ijar_path
    }

    # dex target that generate *.dex.jar
    if (_supports_android) {
      dex(_dex_target_name) {
        sources = [
          _jar_path,
        ]
        output = _dex_path
        deps = [ ":$_process_jar_target_name" ] + _deps + _jar_deps
      }
    }

    if (defined(invoker.main_class)) {
      _binary_script_target_name = "${_template_name}__java_binary_script"
      java_binary_script(_binary_script_target_name) {
        forward_variables_from(invoker,
                               [
                                 "bootclasspath",
                                 "deps",
                                 "main_class",
                                 "wrapper_script_args",
                               ])
        if (!defined(deps)) {
          deps = []
        }
        build_config = _build_config
        jar_path = _jar_path
        script_name = _template_name
        if (defined(invoker.wrapper_script_name)) {
          script_name = invoker.wrapper_script_name
        }
        deps += [ ":$_build_config_target_name" ]
      }
    }

    group(target_name) {
      forward_variables_from(invoker, [ "data_deps" ])
      public_deps = [
        ":$_ijar_target_name",
        ":$_process_jar_target_name",
      ]
      if (_supports_android) {
        public_deps += [ ":$_dex_target_name" ]
      }
      if (defined(invoker.main_class)) {
        # Some targets use the generated script while building, so make it a dep
        # rather than a data_dep.
        public_deps += [ ":$_binary_script_target_name" ]
      }
    }
  }

  # Compiles and jars a set of java files.
  #
  # Outputs:
  #  $jar_path.jar
  #  $jar_path.interface.jar
  #
  # Variables
  #   java_files: List of .java files to compile (same as exists in java_sources_file)
  #   java_sources_file: Path to file containing list of files to compile.
  #   chromium_code: If true, enable extra warnings.
  #   srcjar_deps: List of srcjar dependencies. The .java files contained in the
  #     dependencies srcjar outputs will be compiled and added to the output jar.
  #   jar_path: Use this to explicitly set the output jar path. Defaults to
  #     "${target_gen_dir}/${target_name}.jar.
  template("compile_java") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])

    assert(defined(invoker.build_config))
    assert(defined(invoker.jar_path))

    _build_config = invoker.build_config

    _chromium_code = false
    if (defined(invoker.chromium_code)) {
      _chromium_code = invoker.chromium_code
    }

    _supports_android = true
    if (defined(invoker.supports_android)) {
      _supports_android = invoker.supports_android
    }

    _requires_android =
        defined(invoker.requires_android) && invoker.requires_android

    _enable_errorprone = use_errorprone_java_compiler
    if (!_chromium_code) {
      _enable_errorprone = false
    } else if (defined(invoker.enable_errorprone)) {
      _enable_errorprone = invoker.enable_errorprone
    }

    _provider_configurations = []
    if (defined(invoker.provider_configurations)) {
      _provider_configurations = invoker.provider_configurations
    }

    _processors = []
    _enable_interface_jars_javac = true
    if (defined(invoker.processors_javac)) {
      _processors = invoker.processors_javac
      _enable_interface_jars_javac = _processors == []
    }

    _processor_args = []
    if (defined(invoker.processor_args_javac)) {
      _processor_args = invoker.processor_args_javac
    }

    _additional_jar_files = []
    if (defined(invoker.additional_jar_files)) {
      _additional_jar_files = invoker.additional_jar_files
    }

    if (defined(invoker.enable_incremental_javac_override)) {
      # Use invoker-specified override.
      _enable_incremental_javac = invoker.enable_incremental_javac_override
    } else {
      # Default to build arg if not overridden.
      _enable_incremental_javac = enable_incremental_javac
    }

    _manifest_entries = []
    if (defined(invoker.manifest_entries)) {
      _manifest_entries = invoker.manifest_entries
    }

    _srcjar_deps = []
    if (defined(invoker.srcjar_deps)) {
      _srcjar_deps += invoker.srcjar_deps
    }

    _java_srcjars = []
    if (defined(invoker.srcjars)) {
      _java_srcjars = invoker.srcjars
    }
    foreach(dep, _srcjar_deps) {
      _dep_gen_dir = get_label_info(dep, "target_gen_dir")
      _dep_name = get_label_info(dep, "name")
      _java_srcjars += [ "$_dep_gen_dir/$_dep_name.srcjar" ]
    }

    # Mark srcjar_deps as used.
    assert(_srcjar_deps == [] || true)

    _javac_target_name = "${target_name}__javac"
    _process_prebuilt_target_name = "${target_name}__process_prebuilt"
    _ijar_target_name = "${target_name}__ijar"
    _final_target_name = target_name

    _final_jar_path = invoker.jar_path
    _javac_jar_path = "$target_gen_dir/$target_name.javac.jar"
    _process_prebuilt_jar_path = _final_jar_path
    _final_ijar_path = get_path_info(_final_jar_path, "dir") + "/" +
                       get_path_info(_final_jar_path, "name") + ".interface.jar"

    _emma_instrument = defined(invoker.emma_instrument) &&
                       invoker.emma_instrument && invoker.java_files != []
    if (_emma_instrument) {
      _emma_instr_target_name = "${target_name}__emma_instr"
      _process_prebuilt_jar_path =
          "$target_gen_dir/$target_name.process_prebuilt.jar"
    }

    _rebased_build_config = rebase_path(_build_config, root_build_dir)
    _rebased_jar_path = rebase_path(_javac_jar_path, root_build_dir)

    action(_javac_target_name) {
      script = "//build/android/gyp/javac.py"
      depfile = "$target_gen_dir/$target_name.d"
      deps = _srcjar_deps
      if (defined(invoker.deps)) {
        deps += invoker.deps
      }

      outputs = [
        _javac_jar_path,
        _javac_jar_path + ".md5.stamp",
      ]
      sources = invoker.java_files + _java_srcjars
      inputs = [
        _build_config,
      ]
      if (invoker.java_files != []) {
        inputs += [ invoker.java_sources_file ]
      }

      _rebased_java_srcjars = rebase_path(_java_srcjars, root_build_dir)
      _rebased_depfile = rebase_path(depfile, root_build_dir)
      args = [
        "--depfile=$_rebased_depfile",
        "--jar-path=$_rebased_jar_path",
        "--java-srcjars=$_rebased_java_srcjars",
        "--java-srcjars=@FileArg($_rebased_build_config:javac:srcjars)",
      ]
      if (_enable_interface_jars_javac) {
        args += [ "--classpath=@FileArg($_rebased_build_config:javac:interface_classpath)" ]
      } else {
        args +=
            [ "--classpath=@FileArg($_rebased_build_config:javac:classpath)" ]
      }
      if (_enable_incremental_javac) {
        args += [ "--incremental" ]
        deps += [ "//third_party/jmake($default_toolchain)" ]
        inputs += [ "$root_build_dir/bin/jmake" ]
        outputs += [ "${_javac_jar_path}.pdb" ]
      }
      if (_requires_android) {
        if (defined(invoker.alternative_android_sdk_ijar)) {
          deps += [ invoker.alternative_android_sdk_ijar_dep ]
          _android_sdk_ijar = invoker.alternative_android_sdk_ijar
        } else {
          deps += [ "//build/android:android_ijar" ]
          _android_sdk_ijar = "$root_out_dir/lib.java/android.interface.jar"
        }
        inputs += [ _android_sdk_ijar ]
        _rebased_android_sdk_ijar =
            rebase_path(_android_sdk_ijar, root_build_dir)
        args += [ "--bootclasspath=$_rebased_android_sdk_ijar" ]
      }
      if (_supports_android) {
        args += [ "--java-version=1.7" ]
      }
      foreach(e, _manifest_entries) {
        args += [ "--manifest-entry=" + e ]
      }
      if (_chromium_code) {
        args += [ "--chromium-code=1" ]
      }
      if (_enable_errorprone) {
        deps += [ "//third_party/errorprone:chromium_errorprone" ]
        args += [
          "--use-errorprone-path",
          "bin/chromium_errorprone",
        ]
      }
      foreach(e, _provider_configurations) {
        args += [ "--provider-configuration=" + rebase_path(e, root_build_dir) ]
      }
      foreach(e, _processors) {
        args += [ "--processor=" + e ]
      }
      foreach(e, _processor_args) {
        args += [ "--processor-arg=" + e ]
      }
      foreach(file_tuple, _additional_jar_files) {
        # Each element is of length two, [ path_to_file, path_to_put_in_jar ]
        inputs += [ file_tuple[0] ]
        args +=
            [ "--additional-jar-file=" + file_tuple[0] + ":" + file_tuple[1] ]
      }
      if (invoker.java_files != []) {
        args += [ "@" + rebase_path(invoker.java_sources_file, root_build_dir) ]
      }
    }

    process_java_prebuilt(_process_prebuilt_target_name) {
      forward_variables_from(invoker,
                             [
                               "jar_excluded_patterns",
                               "proguard_preprocess",
                               "proguard_preprocess_config",
                             ])
      build_config = _build_config
      input_jar_path = _javac_jar_path
      output_jar_path = _process_prebuilt_jar_path

      deps = [
        ":$_javac_target_name",
      ]
      if (defined(invoker.deps)) {
        deps += invoker.deps
      }
    }

    if (_emma_instrument) {
      emma_instr(_emma_instr_target_name) {
        forward_variables_from(invoker,
                               [
                                 "java_files",
                                 "java_sources_file",
                               ])

        input_jar_path = _process_prebuilt_jar_path
        output_jar_path = _final_jar_path

        deps = [
          ":$_process_prebuilt_target_name",
        ]
      }
    }

    generate_interface_jar(_ijar_target_name) {
      if (!defined(invoker.proguard_preprocess) ||
          !invoker.proguard_preprocess) {
        # Always used the unfiltered .jar to create the interface jar so that
        # other targets will resolve filtered classes when depending on
        # BuildConfig, NativeLibraries, etc.
        input_jar = _javac_jar_path
        deps = [
          ":$_javac_target_name",
        ]
      } else {
        # However, still apply pre-proguarding, since ignoring that can break
        # compiles.
        input_jar = _process_prebuilt_jar_path
        deps = [
          ":$_process_prebuilt_target_name",
        ]
      }
      output_jar = _final_ijar_path
    }

    group(_final_target_name) {
      forward_variables_from(invoker, [ "visibility" ])
      public_deps = [
        ":$_ijar_target_name",
      ]
      if (_emma_instrument) {
        public_deps += [ ":$_emma_instr_target_name" ]
      } else {
        public_deps += [ ":$_process_prebuilt_target_name" ]
      }
    }
  }

  template("java_library_impl") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])
    _accumulated_deps = []
    if (defined(invoker.deps)) {
      _accumulated_deps = invoker.deps
    }

    assert(defined(invoker.java_files) || defined(invoker.srcjars) ||
           defined(invoker.srcjar_deps))
    _base_path = "$target_gen_dir/$target_name"

    # Jar files can be needed at runtime (by Robolectric tests or java binaries),
    # so do not put them under gen/.
    _jar_name = target_name
    if (defined(invoker.jar_name)) {
      _jar_name = invoker.jar_name
    }
    target_dir_name = get_label_info(":$target_name", "dir")
    _jar_path = "$root_out_dir/lib.java$target_dir_name/$_jar_name.jar"
    if (defined(invoker.jar_path)) {
      _jar_path = invoker.jar_path
    }
    _template_name = target_name

    _final_deps = []

    _supports_android =
        defined(invoker.supports_android) && invoker.supports_android
    _requires_android =
        defined(invoker.requires_android) && invoker.requires_android
    assert(_requires_android || true)  # Mark as used.
    _android_manifest = "//build/android/AndroidManifest.xml"
    if (defined(invoker.android_manifest)) {
      _android_manifest = invoker.android_manifest
    }
    assert(_android_manifest != "")  # Mark as used.

    if (defined(invoker.run_findbugs_override)) {
      _run_findbugs = invoker.run_findbugs_override
    } else {
      _run_findbugs = run_findbugs  # Default to build arg if not overridden.
    }
    assert(_run_findbugs || true)  # Mark as used.

    # Don't enable coverage, lint, findbugs unless the target has some
    # non-generated files.
    if (defined(invoker.chromium_code)) {
      _chromium_code = invoker.chromium_code
    } else {
      _chromium_code = defined(invoker.java_files) && invoker.java_files != []
      if (_chromium_code) {
        # Make chromium_code = false be the default for targets within
        # third_party which contain no chromium-namespaced java files.
        set_sources_assignment_filter([ "*\bthird_party\b*" ])
        sources = [
          get_label_info(":$target_name", "dir"),
        ]
        if (sources == []) {
          set_sources_assignment_filter([ "*\bchromium\b*" ])
          sources = invoker.java_files
          _chromium_code = invoker.java_files != sources
        }
        set_sources_assignment_filter([])
        sources = []
      }
    }

    _emma_never_instrument = !_chromium_code
    if (defined(invoker.emma_never_instrument)) {
      _emma_never_instrument = invoker.emma_never_instrument
    }
    assert(_emma_never_instrument || true)  # Mark as used
    _emma_instrument = emma_coverage && !_emma_never_instrument

    if (_supports_android) {
      _dex_path = _base_path + ".dex.jar"
      if (defined(invoker.dex_path)) {
        _dex_path = invoker.dex_path
      }
    }

    _java_files = []
    if (defined(invoker.java_files)) {
      _java_files += invoker.java_files
    }
    if (_java_files != []) {
      _java_sources_file = "$_base_path.sources"
      write_file(_java_sources_file, rebase_path(_java_files, root_build_dir))
    }

    # Define build_config_deps which will be a list of targets required to
    # build the _build_config.
    if (defined(invoker.override_build_config)) {
      _build_config = invoker.override_build_config
    } else {
      _build_config = _base_path + ".build_config"
      build_config_target_name = "${_template_name}__build_config"

      write_build_config(build_config_target_name) {
        forward_variables_from(invoker,
                               [
                                 "input_jars_paths",
                                 "proguard_configs",
                               ])
        if (defined(invoker.is_java_binary) && invoker.is_java_binary) {
          type = "java_binary"
        } else {
          type = "java_library"
        }
        if (defined(invoker.deps)) {
          possible_config_deps = invoker.deps
        }
        supports_android = _supports_android
        requires_android = _requires_android
        bypass_platform_checks = defined(invoker.bypass_platform_checks) &&
                                 invoker.bypass_platform_checks

        build_config = _build_config
        jar_path = _jar_path
        if (_supports_android) {
          dex_path = _dex_path
        }
        if (_java_files != []) {
          java_sources_file = _java_sources_file
        }

        if (defined(invoker.srcjar_deps)) {
          bundled_srcjars = []
          foreach(d, invoker.srcjar_deps) {
            _dep_gen_dir = get_label_info(d, "target_gen_dir")
            _dep_name = get_label_info(d, "name")
            bundled_srcjars += [ "$_dep_gen_dir/$_dep_name.srcjar" ]
          }
        }
      }
      _accumulated_deps += [ ":$build_config_target_name" ]
    }

    _srcjar_deps = []
    if (defined(invoker.srcjar_deps)) {
      _srcjar_deps = invoker.srcjar_deps
    }

    _srcjars = []
    if (defined(invoker.srcjars)) {
      _srcjars = invoker.srcjars
    }

    assert(_java_files != [] || _srcjar_deps != [] || _srcjars != [])

    _compile_java_target = "${_template_name}__compile_java"
    _final_deps += [ ":$_compile_java_target" ]
    compile_java(_compile_java_target) {
      forward_variables_from(invoker,
                             [
                               "additional_jar_files",
                               "alternative_android_sdk_ijar",
                               "alternative_android_sdk_ijar_dep",
                               "dist_jar_path",
                               "enable_errorprone",
                               "enable_incremental_javac_override",
                               "jar_excluded_patterns",
                               "manifest_entries",
                               "processors_javac",
                               "processor_args_javac",
                               "proguard_preprocess_config",
                               "proguard_preprocess",
                               "provider_configurations",
                             ])
      jar_path = _jar_path
      build_config = _build_config
      java_files = _java_files
      if (_java_files != []) {
        java_sources_file = _java_sources_file
      }
      srcjar_deps = _srcjar_deps
      srcjars = _srcjars
      chromium_code = _chromium_code
      supports_android = _supports_android
      requires_android = _requires_android
      emma_instrument = _emma_instrument
      deps = _accumulated_deps
    }
    _accumulated_deps += [ ":$_compile_java_target" ]
    assert(_accumulated_deps != [])  # Mark used.

    if (defined(invoker.main_class)) {
      # Targets might use the generated script while building, so make it a dep
      # rather than a data_dep.
      _final_deps += [ ":${_template_name}__java_binary_script" ]
      java_binary_script("${_template_name}__java_binary_script") {
        forward_variables_from(invoker,
                               [
                                 "bootclasspath",
                                 "main_class",
                                 "wrapper_script_args",
                               ])
        build_config = _build_config
        jar_path = _jar_path
        script_name = _template_name
        if (defined(invoker.wrapper_script_name)) {
          script_name = invoker.wrapper_script_name
        }
        deps = _accumulated_deps
      }
    }

    _has_lint_target = false
    if (_supports_android) {
      if (_chromium_code) {
        _has_lint_target = true
        android_lint("${_template_name}__lint") {
          android_manifest = _android_manifest
          build_config = _build_config
          jar_path = _jar_path
          java_files = _java_files
          if (_java_files != []) {
            java_sources_file = _java_sources_file
          }
          deps = _accumulated_deps
        }

        if (_run_findbugs) {
          findbugs("${_template_name}__findbugs") {
            build_config = _build_config
            jar_path = _jar_path
            deps = _accumulated_deps
          }
        }

        # Use an intermediate group() rather as the data_deps target in order to
        # avoid lint artifacts showing up as runtime_deps (while still having lint
        # run in parallel to other targets).
        group("${_template_name}__analysis") {
          public_deps = [
            ":${_template_name}__lint",
          ]
          if (_run_findbugs) {
            public_deps += [ ":${_template_name}__findbugs" ]
          }
        }
      }

      _final_deps += [ ":${_template_name}__dex" ]
      dex("${_template_name}__dex") {
        sources = [
          _jar_path,
        ]
        output = _dex_path
        deps = [
          ":$_compile_java_target",
        ]
      }
    }

    group(target_name) {
      forward_variables_from(invoker,
                             [
                               "data",
                               "data_deps",
                               "visibility",
                             ])
      if (!defined(data_deps)) {
        data_deps = []
      }
      public_deps = _final_deps
      if (_has_lint_target) {
        data_deps += [ ":${_template_name}__analysis" ]
      }
    }
  }

  # Runs process_resources.py
  template("process_resources") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])

    zip_path = invoker.zip_path
    srcjar_path = invoker.srcjar_path
    r_text_path = invoker.r_text_path
    build_config = invoker.build_config
    android_manifest = invoker.android_manifest

    non_constant_id = true
    if (defined(invoker.generate_constant_ids) &&
        invoker.generate_constant_ids) {
      non_constant_id = false
    }

    action(target_name) {
      forward_variables_from(invoker,
                             [
                               "deps",
                               "visibility",
                             ])
      script = "//build/android/gyp/process_resources.py"

      depfile = "$target_gen_dir/$target_name.d"
      outputs = [
        zip_path,
        srcjar_path,
        r_text_path,
      ]

      _all_resource_dirs = []
      sources = []

      if (defined(invoker.resource_dirs)) {
        _all_resource_dirs += invoker.resource_dirs

        # Speed up "gn gen" by short-circuiting the empty directory.
        if (invoker.resource_dirs != [ "//build/android/ant/empty/res" ] &&
            invoker.resource_dirs != []) {
          _sources_build_rel =
              exec_script("//build/android/gyp/find.py",
                          rebase_path(invoker.resource_dirs, root_build_dir),
                          "list lines")
          sources += rebase_path(_sources_build_rel, ".", root_build_dir)
        }
      }

      if (defined(invoker.generated_resource_dirs)) {
        assert(defined(invoker.generated_resource_files))
        _all_resource_dirs += invoker.generated_resource_dirs
        sources += invoker.generated_resource_files
      }

      inputs = [
        build_config,
        android_manifest,
      ]

      _rebased_all_resource_dirs =
          rebase_path(_all_resource_dirs, root_build_dir)
      rebase_build_config = rebase_path(build_config, root_build_dir)

      if (defined(invoker.android_aapt_path)) {
        _android_aapt_path = invoker.android_aapt_path
      } else {
        _android_aapt_path = android_default_aapt_path
      }

      if (defined(invoker.alternative_android_sdk_jar)) {
        _rebased_android_sdk_jar =
            rebase_path(invoker.alternative_android_sdk_jar)
      } else {
        _rebased_android_sdk_jar = rebased_android_sdk_jar
      }

      args = [
        "--depfile",
        rebase_path(depfile, root_build_dir),
        "--android-sdk-jar",
        _rebased_android_sdk_jar,
        "--aapt-path",
        _android_aapt_path,
        "--android-manifest",
        rebase_path(android_manifest, root_build_dir),
        "--resource-dirs=$_rebased_all_resource_dirs",
        "--srcjar-out",
        rebase_path(srcjar_path, root_build_dir),
        "--resource-zip-out",
        rebase_path(zip_path, root_build_dir),
        "--r-text-out",
        rebase_path(r_text_path, root_build_dir),
        "--dependencies-res-zips=@FileArg($rebase_build_config:resources:dependency_zips)",
        "--extra-res-packages=@FileArg($rebase_build_config:resources:extra_package_names)",
        "--extra-r-text-files=@FileArg($rebase_build_config:resources:extra_r_text_files)",
      ]

      if (non_constant_id) {
        args += [ "--non-constant-id" ]
      }

      if (defined(invoker.custom_package)) {
        args += [
          "--custom-package",
          invoker.custom_package,
        ]
      }

      if (defined(invoker.v14_skip) && invoker.v14_skip) {
        args += [ "--v14-skip" ]
      }

      if (defined(invoker.shared_resources) && invoker.shared_resources) {
        args += [ "--shared-resources" ]
      }

      if (defined(invoker.app_as_shared_lib) && invoker.app_as_shared_lib) {
        args += [ "--app-as-shared-lib" ]
      }

      if (defined(invoker.include_all_resources) &&
          invoker.include_all_resources) {
        args += [ "--include-all-resources" ]
      }

      if (defined(invoker.all_resources_zip_path)) {
        all_resources_zip = invoker.all_resources_zip_path
        outputs += [ all_resources_zip ]
        args += [
          "--all-resources-zip-out",
          rebase_path(all_resources_zip, root_build_dir),
        ]
      }

      if (defined(invoker.proguard_file)) {
        outputs += [ invoker.proguard_file ]
        args += [
          "--proguard-file",
          rebase_path(invoker.proguard_file, root_build_dir),
        ]
      }

      if (defined(invoker.args)) {
        args += invoker.args
      }
    }
  }

