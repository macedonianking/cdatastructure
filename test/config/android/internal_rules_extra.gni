import("//build/config/android/config.gni")

assert(is_android)

# 写入build_config文件
template("write_build_config_extra") {

  type = invoker.type
  if (defined(invoker.possible_config_deps)) {
    print(invoker.possible_config_deps)
  }

  assert(type == "android_apk" || type == "java_library"
        || type == "android_resources")

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }

    _deps_configs = []
    forward_variables_from(invoker, [ "possible_config_deps" ])
    if (defined(possible_config_deps)) {
      foreach(_dep, possible_config_deps) {
        _target_label = get_label_info(_dep, "label_no_toolchain")
        _target_build_config_label = "${_target_label}__build_config"
        deps += [ _target_build_config_label ]
        _target_gen_dir = get_label_info(_target_build_config_label, "target_gen_dir")
        _target_name = get_label_info(_target_label, "name")
        _target_build_config_path = "$_target_gen_dir/$_target_name.build_config"
        _deps_configs += [ _target_build_config_path ]
      }
    }
    _rebased_deps_configs = rebase_path(_deps_configs, root_build_dir)

    _required_android = type == "java_library"


    set_sources_assignment_filter([])
    build_config = invoker.build_config
    depfile = "$target_gen_dir/$target_name.d"

    script = "//test/script/write_build_config.py"
    sources = []
    outputs = [
        build_config,
    ]

    args = [
      "--type", type,
      "--build-config", rebase_path(build_config, root_build_dir),
      "--depfile", rebase_path(depfile, root_build_dir),
      "--deps-config=$_rebased_deps_configs",
    ]

    if (_required_android) {
      args += [
        "--required-android",
      ]
    }
  }

}

template("android_apk_extra") {
  
  type = "android_apk"
  build_config = "$target_gen_dir/$target_name.build_config"
  forward_variables_from(invoker, 
      [ "apk_project_name", 
        "release_name",
      ])


  _build_config_target_name = "${target_name}__build_config"
  _build_config_target_label = ":${_build_config_target_name}"
  target("write_build_config_extra", _build_config_target_name) {
    forward_variables_from(invoker, [ "deps", "possible_config_deps" ])
  }

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ _build_config_target_label ]

    script = "//test/script/android_apk.py"
    sources = []
    outputs = [
      "$target_out_dir/$apk_project_name-$release_name.apk",
    ]

    args = [
      "--final-apk", rebase_path(outputs[0], root_build_dir),
      "--build-config", rebase_path(build_config, root_build_dir),
    ]
  }
}

template("java_library_extra") {
  type = "java_library"
  build_config = "$target_gen_dir/$target_name.build_config"

  _build_config_target_name = "${target_name}__build_config"
  _build_config_target_label = ":${_build_config_target_name}"
  target("write_build_config_extra", _build_config_target_name) {
    forward_variables_from(invoker, [ "deps", "possible_config_deps" ])
  }

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ _build_config_target_label ]

    script = "//test/script/java_library.py"
    sources = []
    outputs = [
      "$target_out_dir/$target_name.jar",
    ]

    args = [
      "--jar", rebase_path(outputs[0], root_build_dir),
      "--build-config", rebase_path(build_config, root_build_dir),
    ]
  }
}

template("android_resources_extra") {
  type = "android_resources"
  build_config = "$target_gen_dir/$target_name.build_config"

  # 生成android_resources.build_config
  _build_config_target_name = "${target_name}__build_config"
  _build_config_target_label = ":${_build_config_target_name}"
  target("write_build_config_extra", _build_config_target_name) {
    forward_variables_from(invoker, [ "deps", "possible_config_deps" ])
  }

  action(target_name) {
    forward_variables_from(invoker, 
                           [ 
                            "deps", 
                            "android_resources_dir",
                            "android_manifest"
                           ])
    output_resources_zip = "$target_gen_dir/$target_name/resources.zip"
    output_resources_R_jar = "$target_gen_dir/$target_name/R.jar"

    depfile = "$target_gen_dir/$target_name.d"
    script = "//test/script/android_resources.py"
    sources = android_resources_dir
    outputs = [
      output_resources_zip,
      output_resources_R_jar
    ]

    _rebased_android_resources_dir = rebase_path(android_resources_dir, 
        root_build_dir)

    args = [
      "--resources-zip", rebase_path(output_resources_zip, root_build_dir),
      "--R-jar", rebase_path(output_resources_R_jar, root_build_dir),
      "--resources-dir=$_rebased_android_resources_dir",
      "--depfile", rebase_path(depfile, root_build_dir),
      "--manifest", rebase_path(android_manifest, root_build_dir),
    ]
  }
}
