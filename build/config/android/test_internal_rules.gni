import("//build/config/android/config.gni")

assert(is_android)

_java_target_whitelist = [
  "*:*_java",
  "*:*_javalib",
  "*:*_java_*",  # e.g. java_test_support
  "*:java",
  "*:junit",
  "*:junit_*",
  "*:*_junit_*",
  "*:*javatests",
  "*:*_assets",
  "*android*:assets",
  "*:*_apk_*resources",
  "*android*:resources",
  "*:*_resources",
  "*:*_grd",
  "*:*locale_paks",

  # TODO(agrieve): Rename targets below to match above patterns.
  "*android_webview/glue:glue",
  "//build/android/pylib/device/commands:chromium_commands",
  "//build/android/rezip:rezip",
  "//chrome/test/android/cast_emulator:cast_emulator",
  "//components/cronet/android:cronet_api",
  "//components/cronet/android:cronet_javadoc_classpath",
  "//components/policy:app_restrictions_resources",
  "//device/battery/android:battery_monitor_android",
  "//device/vibration/android:vibration_manager_android",
  "//mojo/public/java:bindings",
  "//mojo/public/java:system",
  "//third_party/android_tools:emma_device",
  "//third_party/cardboard-java:cardboard-java",
  "//third_party/custom_tabs_client:custom_tabs_client_shared_lib",
  "//third_party/custom_tabs_client:custom_tabs_support_lib",
  "//third_party/errorprone:chromium_errorprone",
  "//third_party/haha:haha",
  "//third_party/junit:hamcrest",
  "//third_party/netty4:netty_all",
  "//third_party/netty-tcnative:netty-tcnative",
  "//third_party/robolectric:android-all-4.3_r2-robolectric-0",
  "//third_party/robolectric:android-all-5.0.0_r2-robolectric-1",
  "//third_party/robolectric:json-20080701",
  "//third_party/robolectric:tagsoup-1.2",
  "//third_party/robolectric:shadows-core-3.0-18",
  "//third_party/robolectric:shadows-core-3.0-21",
  "//third_party/robolectric:shadows-multidex-3.0",
]

# Targets that match the whitelist but are not actually java targets.
_java_target_blacklist = [
  "//chrome:packed_resources",
  "//remoting/android:remoting_android_raw_resources",
  "*:*_unpack_aar",
]

# 写入build_config文件
template("write_build_config_extra") {

  

  action(target_name) {
    build_config = invoker.build_config

    script = "//build/script/gen_temp_data.py"
    sources = []
    outputs = [
        build_config,
    ]

    print(target_name)
    print(get_label_info(":${target_name}", "label_no_toolchain"))

    args = [
      rebase_path(outputs[0], root_build_dir),
    ]
  }

}

template("android_apk_extra") {
  
  target("write_build_config_extra", "${target_name}_build_config") {
    build_config = "$target_gen_dir/$target_name.build_config"
  }

  
}
