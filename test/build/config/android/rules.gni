import("//build/config/android/config.gni")
import("//build/config/android/internal_rules.gni")

assert(is_android)


  # Declare an Android resources target
  #
  # This creates a resources zip file that will be used when building an Android
  # library or apk and included into a final apk.
  #
  # To include these resources in a library/apk, this target should be listed in
  # the library's deps. A library/apk will also include any resources used by its
  # own dependencies.
  #
  # Variables
  #   deps: Specifies the dependencies of this target. Any Android resources
  #     listed in deps will be included by libraries/apks that depend on this
  #     target.
  #   resource_dirs: List of directories containing resources for this target.
  #   generated_resource_dirs: List of directories containing resources for this
  #     target which are *generated* by a dependency. |generated_resource_files|
  #     must be specified if |generated_resource_dirs| is specified.
  #   generated_resource_files: List of all files in |generated_resource_dirs|.
  #     |generated_resource_dirs| must be specified in |generated_resource_files|
  #     is specified.
  #   android_manifest: AndroidManifest.xml for this target. Defaults to
  #     //build/android/AndroidManifest.xml.
  #   android_manifest_dep: Target that generates AndroidManifest (if applicable)
  #   custom_package: java package for generated .java files.
  #   v14_skip: If true, don't run v14 resource generator on this. Defaults to
  #     false. (see build/android/gyp/generate_v14_compatible_resources.py)
  #   shared_resources: If true make a resource package that can be loaded by a
  #     different application at runtime to access the package's resources.
  #   app_as_shared_lib: If true make a resource package that can be loaded as
  #     both shared_resources and normal application.

  # Example:
  #   android_resources("foo_resources") {
  #     deps = [":foo_strings_grd"]
  #     resource_dirs = ["res"]
  #     custom_package = "org.chromium.foo"
  #   }
  #
  #   android_resources("foo_resources_overrides") {
  #     deps = [":foo_resources"]
  #     resource_dirs = ["res_overrides"]
  #   }
  template("android_resources") {
    set_sources_assignment_filter([])
    forward_variables_from(invoker, [ "testonly" ])

    assert(defined(invoker.resource_dirs))

    base_path = "$target_gen_dir/$target_name"
    zip_path = base_path + ".resources.zip"
    srcjar_path = base_path + ".srcjar"
    r_text_path = base_path + "_R.txt"
    build_config = base_path + ".build_config"

    build_config_target_name = "${target_name}__build_config"
    process_resources_target_name = "${target_name}__process_resources"
    final_target_name = target_name

    write_build_config(build_config_target_name) {
      type = "android_resources"
      forward_variables_from(invoker,
                             [
                               "android_manifest",
                               "custom_package",
                             ])
      resource_dirs = []
      if (defined(invoker.resource_dirs)) {
        resource_dirs += invoker.resource_dirs
      }
      if (defined(invoker.generated_resource_dirs)) {
        resource_dirs += invoker.generated_resource_dirs
      }

      if (defined(invoker.deps)) {
        possible_config_deps = invoker.deps
      }
      if (defined(invoker.android_manifest_dep)) {
        deps = [
          invoker.android_manifest_dep,
        ]
      }

      # No package means resources override their deps.
      if (defined(custom_package) || defined(android_manifest)) {
        r_text = r_text_path
      } else {
        assert(defined(invoker.deps),
               "Must specify deps when custom_package is omitted.")
      }

      resources_zip = zip_path
      srcjar = srcjar_path
    }

    process_resources(process_resources_target_name) {
      forward_variables_from(invoker,
                             [
                               "app_as_shared_lib",
                               "android_manifest",
                               "custom_package",
                               "deps",
                               "generated_resource_dirs",
                               "generated_resource_files",
                               "resource_dirs",
                               "shared_resources",
                               "v14_skip",
                             ])
      if (!defined(deps)) {
        deps = []
      }
      deps += [ ":$build_config_target_name" ]
      if (defined(invoker.android_manifest_dep)) {
        deps += [ invoker.android_manifest_dep ]
      }

      # Always generate R.onResourcesLoaded() method, it is required for
      # compiling ResourceRewriter, there is no side effect because the
      # generated R.class isn't used in final apk.
      shared_resources = true
      if (!defined(android_manifest)) {
        android_manifest = "//build/android/AndroidManifest.xml"
      }
    }

    group(final_target_name) {
      forward_variables_from(invoker, [ "visibility" ])
      public_deps = [
        ":${target_name}__process_resources",
      ]
    }
  }


  # Declare a group() that supports forwarding java dependency information.
  #
  # Example
  #  java_group("conditional_deps") {
  #    if (enable_foo) {
  #      deps = [":foo_java"]
  #    }
  #  }
  template("java_group") {
    forward_variables_from(invoker, [ "testonly" ])
    write_build_config("${target_name}__build_config") {
      type = "group"
      build_config = "$target_gen_dir/${invoker.target_name}.build_config"
      if (defined(invoker.deps)) {
        possible_config_deps = invoker.deps
      }
    }
    group(target_name) {
      forward_variables_from(invoker, "*")
      if (!defined(deps)) {
        deps = []
      }
      deps += [ ":${target_name}__build_config" ]
    }
  }


  # Declare a Java executable target
  #
  # This target creates an executable from java code and libraries. The executable
  # will be in the output folder's /bin/ directory.
  #
  # Variables
  #   deps: Specifies the dependencies of this target. Java targets in this list
  #     will be included in the executable (and the javac classpath).
  #   java_files: List of .java files included in this library.
  #   srcjar_deps: List of srcjar dependencies. The .java files in the srcjars
  #     will be added to java_files and be included in this library.
  #   srcjars: List of srcjars to be included in this library, together with the
  #     ones obtained from srcjar_deps.
  #   bypass_platform_checks: Disables checks about cross-platform (Java/Android)
  #     dependencies for this target. This will allow depending on an
  #     android_library target, for example.
  #   chromium_code: If true, extra analysis warning/errors will be enabled.
  #   enable_errorprone: If true, enables the errorprone compiler.
  #   enable_incremental_javac_override: Overrides the
  #     global enable_incremental_javac.
  #   main_class: When specified, a wrapper script is created within
  #     $root_build_dir/bin to launch the binary with the given class as the
  #     entrypoint.
  #   wrapper_script_args: List of additional arguments for the wrapper script.
  #
  #   data_deps, testonly
  #
  # Example
  #   java_binary("foo") {
  #     java_files = [ "org/chromium/foo/FooMain.java" ]
  #     deps = [ ":bar_java" ]
  #     main_class = "org.chromium.foo.FooMain"
  #   }
  template("java_binary") {
    set_sources_assignment_filter([])

    java_library_impl(target_name) {
      forward_variables_from(invoker, "*")
      supports_android = false
      main_class = invoker.main_class
      is_java_binary = true
    }
  }

  # Declare a java library target
  #
  # Variables
  #   deps: Specifies the dependencies of this target. Java targets in this list
  #     will be added to the javac classpath.
  #
  #   java_files: List of .java files included in this library.
  #   srcjar_deps: List of srcjar dependencies. The .java files in the srcjars
  #     will be added to java_files and be included in this library.
  #   srcjars: List of srcjars to be included in this library, together with the
  #     ones obtained from srcjar_deps.
  #
  #   input_jars_paths: A list of paths to the jars that should be included
  #     in the classpath. These are in addition to library .jars that
  #     appear in deps.
  #
  #   chromium_code: If true, extra analysis warning/errors will be enabled.
  #   enable_errorprone: If true, enables the errorprone compiler.
  #   enable_incremental_javac_override: Overrides the global
  #     enable_incremental_javac.
  #
  #   jar_excluded_patterns: List of patterns of .class files to exclude from the
  #     final jar.
  #
  #   proguard_preprocess: If true, proguard preprocessing will be run. This can
  #     be used to remove unwanted parts of the library.
  #   proguard_preprocess_config: Path to the proguard config for preprocessing.
  #   proguard_configs: List of proguard configs to use in final apk step for
  #     any apk that depends on this library.
  #
  #   supports_android: If true, Android targets (android_library, android_apk)
  #     may depend on this target. Note: if true, this target must only use the
  #     subset of Java available on Android.
  #   bypass_platform_checks: Disables checks about cross-platform (Java/Android)
  #     dependencies for this target. This will allow depending on an
  #     android_library target, for example.
  #
  #   additional_jar_files: Use to package additional files into the output jar.
  #     Pass a list of length-2 lists with format
  #     [ [ path_to_file, path_to_put_in_jar ] ]
  #
  #
  #   data_deps, testonly
  #
  # Example
  #   java_library("foo_java") {
  #     java_files = [
  #       "org/chromium/foo/Foo.java",
  #       "org/chromium/foo/FooInterface.java",
  #       "org/chromium/foo/FooService.java",
  #     ]
  #     deps = [
  #       ":bar_java"
  #     ]
  #     srcjar_deps = [
  #       ":foo_generated_enum"
  #     ]
  #     jar_excluded_patterns = [
  #       "*/FooService.class", "*/FooService\$*.class"
  #     ]
  #   }
  template("java_library") {
    set_sources_assignment_filter([])
    java_library_impl(target_name) {
      forward_variables_from(invoker, "*")
    }
  }

  # Declare a java library target for a prebuilt jar
  #
  # Variables
  #   deps: Specifies the dependencies of this target. Java targets in this list
  #     will be added to the javac classpath.
  #   jar_path: Path to the prebuilt jar.
  #   jar_dep: Target that builds jar_path (optional).
  #   proguard_preprocess: If true, proguard preprocessing will be run. This can
  #     be used to remove unwanted parts of the library.
  #   proguard_preprocess_config: Path to the proguard config for preprocessing.
  #   proguard_configs: List of proguard configs to use in final apk step for
  #     any apk that depends on this library.
  #   supports_android: If true, Android targets (android_library, android_apk)
  #     may depend on this target. Note: if true, this target must only use the
  #     subset of Java available on Android.
  #
  # Example
  #   java_prebuilt("foo_java") {
  #     jar_path = "foo.jar"
  #     deps = [
  #       ":foo_resources",
  #       ":bar_java"
  #     ]
  #   }
  template("java_prebuilt") {
    set_sources_assignment_filter([])
    java_prebuilt_impl(target_name) {
      forward_variables_from(invoker, "*")
    }
  }
