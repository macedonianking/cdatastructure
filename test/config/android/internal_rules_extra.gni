import("//build/config/android/config.gni")

assert(is_android)

# 白名单
_java_target_whitelist = [
  "*:*_java",
  "*:*_javalib",
  "*:*_java_*",  # e.g. java_test_support
  "*:java",
  "*:junit",
  "*:junit_*",
  "*:*_junit_*",
  "*:*javatests",
  "*:*_assets",
  "*android*:assets",
  "*:*_apk_*resources",
  "*android*:resources",
  "*:*_resources",
  "*:*_grd",
  "*:*locale_paks",

  # TODO(agrieve): Rename targets below to match above patterns.
  "*android_webview/glue:glue",
  "//build/android/pylib/device/commands:chromium_commands",
  "//build/android/rezip:rezip",
  "//chrome/test/android/cast_emulator:cast_emulator",
  "//components/cronet/android:cronet_api",
  "//components/cronet/android:cronet_javadoc_classpath",
  "//components/policy:app_restrictions_resources",
  "//device/battery/android:battery_monitor_android",
  "//device/vibration/android:vibration_manager_android",
  "//mojo/public/java:bindings",
  "//mojo/public/java:system",
  "//third_party/android_tools:emma_device",
  "//third_party/cardboard-java:cardboard-java",
  "//third_party/custom_tabs_client:custom_tabs_client_shared_lib",
  "//third_party/custom_tabs_client:custom_tabs_support_lib",
  "//third_party/errorprone:chromium_errorprone",
  "//third_party/haha:haha",
  "//third_party/junit:hamcrest",
  "//third_party/netty4:netty_all",
  "//third_party/netty-tcnative:netty-tcnative",
  "//third_party/robolectric:android-all-4.3_r2-robolectric-0",
  "//third_party/robolectric:android-all-5.0.0_r2-robolectric-1",
  "//third_party/robolectric:json-20080701",
  "//third_party/robolectric:tagsoup-1.2",
  "//third_party/robolectric:shadows-core-3.0-18",
  "//third_party/robolectric:shadows-core-3.0-21",
  "//third_party/robolectric:shadows-multidex-3.0",
]

# 黑名单
_java_target_blacklist = [
  "//chrome:packed_resources",
  "//remoting/android:remoting_android_raw_resources",
  "*:*_unpack_aar",
]

# 写入build_config文件
template("write_build_config_extra") {

  type = invoker.type
  if (defined(invoker.possible_config_deps)) {
    print(invoker.possible_config_deps)
  }

  _config_deps_paths = []
  forward_variables_from(invoker, [ "possible_config_deps" ])
  if (defined(possible_config_deps)) {
    foreach(_dep, possible_config_deps) {
      _target_label = get_label_info(_dep, "label_no_toolchain")
      _target_build_config_label = "${_target_label}__build_config"
      _target_gen_dir = get_label_info(_target_build_config_label, "target_gen_dir")
      _target_name = get_label_info(_target_label, "name")
      _target_build_config_path = "$_target_gen_dir/$_target_name.build_config"
      _config_deps_paths += [ _target_build_config_path ]
    }
  }
  print(_config_deps_paths)

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])

    set_sources_assignment_filter([])
    build_config = invoker.build_config

    script = "//test/script/write_build_config_extra.py"
    sources = []
    outputs = [
        build_config,
    ]

    args = [
      rebase_path(outputs[0], root_build_dir),
      "--type", type,
    ]
  }

}

template("android_apk_extra") {
  
  type = "android_apk"
  build_config = "$target_gen_dir/$target_name.build_config"
  forward_variables_from(invoker, 
      [ "apk_project_name", 
        "release_name",
      ])


  _build_config_target_name = "${target_name}__build_config"
  _build_config_target_label = ":${_build_config_target_name}"
  target("write_build_config_extra", _build_config_target_name) {
    forward_variables_from(invoker, [ "deps", "possible_config_deps" ])
  }

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ _build_config_target_label ]

    script = "//test/script/android_apk.py"
    sources = []
    outputs = [
      "$target_out_dir/$apk_project_name-$release_name.apk",
    ]

    args = [
      "--final-apk", rebase_path(outputs[0], root_build_dir),
      "--build-config", rebase_path(build_config, root_build_dir),
    ]
  }
}

template("java_library_extra") {
  type = "java_library"
  build_config = "$target_gen_dir/$target_name.build_config"

  _build_config_target_name = "${target_name}__build_config"
  _build_config_target_label = ":${_build_config_target_name}"
  target("write_build_config_extra", _build_config_target_name) {
    forward_variables_from(invoker, [ "deps", "possible_config_deps" ])
  }

  action(target_name) {
    forward_variables_from(invoker, [ "deps" ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ _build_config_target_label ]

    script = "//test/script/java_library.py"
    sources = []
    outputs = [
      "$target_out_dir/$target_name.jar",
    ]

    args = [
      "--jar", rebase_path(outputs[0], root_build_dir),
      "--build-config", rebase_path(build_config, root_build_dir),
    ]
  }
}
